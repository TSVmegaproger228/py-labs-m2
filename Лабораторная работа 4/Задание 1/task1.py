# TODO: описать базовый класс
class MusicalWork:
    """
    Базовый класс для музыкальных произведений.
    Хранит информацию о названии, исполнителе и годе выпуска.
    """

    def __init__(self, title: str, artist: str, year: int) -> None:
        """
        Инициализация музыкального произведения.

        :param title: Название произведения.
        :param artist: Исполнитель произведения.
        :param year: Год выпуска произведения.
        """
        self.__title = title  # Приватный атрибут для защиты данных
        self.__artist = artist  # Приватный атрибут для защиты данных
        self.__year = year  # Приватный атрибут для защиты данных

    def __str__(self) -> str:
        """
        Возвращает строковое представление музыкального произведения.

        :return: Строка в формате "Название - Исполнитель (Год)".
        """
        return f"{self.__title} - {self.__artist} ({self.__year})"

    def __repr__(self) -> str:
        """
        Возвращает формальное представление музыкального произведения.

        :return: Строка в формате "MusicalWork(Название, Исполнитель, Год)".
        """
        return f"MusicalWork('{self.__title}', '{self.__artist}', {self.__year})"

    def play(self) -> None:
        """
        Воспроизводит музыкальное произведение.
        
        Эта функция может быть переопределена в дочерних классах.
        """
        print(f"Воспроизводится {self.__str__()}.")


# TODO: описать дочерний класс
class Jazz(MusicalWork):
    """
    Дочерний класс для джазовых музыкальных произведений.
    Добавляет уровень импровизации к базовым атрибутам.
    """

    def __init__(self, title: str, artist: str, year: int, improvisation_level: int) -> None:
        """
        Инициализация джазового произведения.

        :param title: Название произведения.
        :param artist: Исполнитель произведения.
        :param year: Год выпуска произведения.
        :param improvisation_level: Уровень импровизации (от 1 до 10).
        """
        super().__init__(title, artist, year)  # Вызов конструктора базового класса
        self.__improvisation_level = improvisation_level  # Приватный атрибут

    def __str__(self) -> str:
        """
        Возвращает строковое представление джазового произведения.

        :return: Строка в формате "Название - Исполнитель (Год) [Импровизация: Уровень]".
        """
        return f"{super().__str__()} [Импровизация: {self.__improvisation_level}]"

    def __repr__(self) -> str:
        """
        Возвращает формальное представление джазового произведения.

        :return: Строка в формате "Jazz(Название, Исполнитель, Год, Уровень Импровизации)".
        """
        return f"Jazz('{self._MusicalWork__title}', '{self._MusicalWork__artist}', {self._MusicalWork__year}, {self.__improvisation_level})"

    def play(self) -> None:
        """
        Воспроизводит джазовое произведение с учетом уровня импровизации.

        Переопределение метода play для добавления специфической функциональности,
        связанной с джазовой музыкой.
        """
        print(f"Воспроизводится джазовое произведение {self.__str__()} с уровнем импровизации {self.__improvisation_level}.")
